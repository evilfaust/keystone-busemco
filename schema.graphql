# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type BusStop {
  id: ID!
  name: String
  coordinates: String
  photo: String
  stopTimes(where: StopTimeWhereInput! = {}, orderBy: [StopTimeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StopTimeWhereUniqueInput): [StopTime!]
  stopTimesCount(where: StopTimeWhereInput! = {}): Int
}

input BusStopWhereUniqueInput {
  id: ID
}

input BusStopWhereInput {
  AND: [BusStopWhereInput!]
  OR: [BusStopWhereInput!]
  NOT: [BusStopWhereInput!]
  id: IDFilter
  name: StringFilter
  coordinates: StringFilter
  photo: StringFilter
  stopTimes: StopTimeManyRelationFilter
}

input StopTimeManyRelationFilter {
  every: StopTimeWhereInput
  some: StopTimeWhereInput
  none: StopTimeWhereInput
}

input BusStopOrderByInput {
  id: OrderDirection
  name: OrderDirection
  coordinates: OrderDirection
  photo: OrderDirection
}

input BusStopUpdateInput {
  name: String
  coordinates: String
  photo: String
  stopTimes: StopTimeRelateToManyForUpdateInput
}

input StopTimeRelateToManyForUpdateInput {
  disconnect: [StopTimeWhereUniqueInput!]
  set: [StopTimeWhereUniqueInput!]
  create: [StopTimeCreateInput!]
  connect: [StopTimeWhereUniqueInput!]
}

input BusStopUpdateArgs {
  where: BusStopWhereUniqueInput!
  data: BusStopUpdateInput!
}

input BusStopCreateInput {
  name: String
  coordinates: String
  photo: String
  stopTimes: StopTimeRelateToManyForCreateInput
}

input StopTimeRelateToManyForCreateInput {
  create: [StopTimeCreateInput!]
  connect: [StopTimeWhereUniqueInput!]
}

type Route {
  id: ID!
  name: String
  stops(where: BusStopWhereInput! = {}, orderBy: [BusStopOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BusStopWhereUniqueInput): [BusStop!]
  stopsCount(where: BusStopWhereInput! = {}): Int
  trips(where: TripWhereInput! = {}, orderBy: [TripOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TripWhereUniqueInput): [Trip!]
  tripsCount(where: TripWhereInput! = {}): Int
}

input RouteWhereUniqueInput {
  id: ID
}

input RouteWhereInput {
  AND: [RouteWhereInput!]
  OR: [RouteWhereInput!]
  NOT: [RouteWhereInput!]
  id: IDFilter
  name: StringFilter
  stops: BusStopManyRelationFilter
  trips: TripManyRelationFilter
}

input BusStopManyRelationFilter {
  every: BusStopWhereInput
  some: BusStopWhereInput
  none: BusStopWhereInput
}

input TripManyRelationFilter {
  every: TripWhereInput
  some: TripWhereInput
  none: TripWhereInput
}

input RouteOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input RouteUpdateInput {
  name: String
  stops: BusStopRelateToManyForUpdateInput
  trips: TripRelateToManyForUpdateInput
}

input BusStopRelateToManyForUpdateInput {
  disconnect: [BusStopWhereUniqueInput!]
  set: [BusStopWhereUniqueInput!]
  create: [BusStopCreateInput!]
  connect: [BusStopWhereUniqueInput!]
}

input TripRelateToManyForUpdateInput {
  disconnect: [TripWhereUniqueInput!]
  set: [TripWhereUniqueInput!]
  create: [TripCreateInput!]
  connect: [TripWhereUniqueInput!]
}

input RouteUpdateArgs {
  where: RouteWhereUniqueInput!
  data: RouteUpdateInput!
}

input RouteCreateInput {
  name: String
  stops: BusStopRelateToManyForCreateInput
  trips: TripRelateToManyForCreateInput
}

input BusStopRelateToManyForCreateInput {
  create: [BusStopCreateInput!]
  connect: [BusStopWhereUniqueInput!]
}

input TripRelateToManyForCreateInput {
  create: [TripCreateInput!]
  connect: [TripWhereUniqueInput!]
}

type Trip {
  id: ID!
  name: String
  route: Route
  bus: Bus
  driver: Driver
  stops(where: BusStopWhereInput! = {}, orderBy: [BusStopOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BusStopWhereUniqueInput): [BusStop!]
  stopsCount(where: BusStopWhereInput! = {}): Int
  stopTimes(where: StopTimeWhereInput! = {}, orderBy: [StopTimeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StopTimeWhereUniqueInput): [StopTime!]
  stopTimesCount(where: StopTimeWhereInput! = {}): Int
}

input TripWhereUniqueInput {
  id: ID
}

input TripWhereInput {
  AND: [TripWhereInput!]
  OR: [TripWhereInput!]
  NOT: [TripWhereInput!]
  id: IDFilter
  name: StringFilter
  route: RouteWhereInput
  bus: BusWhereInput
  driver: DriverWhereInput
  stops: BusStopManyRelationFilter
  stopTimes: StopTimeManyRelationFilter
}

input TripOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TripUpdateInput {
  name: String
  route: RouteRelateToOneForUpdateInput
  bus: BusRelateToOneForUpdateInput
  driver: DriverRelateToOneForUpdateInput
  stops: BusStopRelateToManyForUpdateInput
  stopTimes: StopTimeRelateToManyForUpdateInput
}

input RouteRelateToOneForUpdateInput {
  create: RouteCreateInput
  connect: RouteWhereUniqueInput
  disconnect: Boolean
}

input BusRelateToOneForUpdateInput {
  create: BusCreateInput
  connect: BusWhereUniqueInput
  disconnect: Boolean
}

input DriverRelateToOneForUpdateInput {
  create: DriverCreateInput
  connect: DriverWhereUniqueInput
  disconnect: Boolean
}

input TripUpdateArgs {
  where: TripWhereUniqueInput!
  data: TripUpdateInput!
}

input TripCreateInput {
  name: String
  route: RouteRelateToOneForCreateInput
  bus: BusRelateToOneForCreateInput
  driver: DriverRelateToOneForCreateInput
  stops: BusStopRelateToManyForCreateInput
  stopTimes: StopTimeRelateToManyForCreateInput
}

input RouteRelateToOneForCreateInput {
  create: RouteCreateInput
  connect: RouteWhereUniqueInput
}

input BusRelateToOneForCreateInput {
  create: BusCreateInput
  connect: BusWhereUniqueInput
}

input DriverRelateToOneForCreateInput {
  create: DriverCreateInput
  connect: DriverWhereUniqueInput
}

type StopTime {
  id: ID!
  busStop: BusStop
  trip: Trip
  departureTime: String
}

input StopTimeWhereUniqueInput {
  id: ID
}

input StopTimeWhereInput {
  AND: [StopTimeWhereInput!]
  OR: [StopTimeWhereInput!]
  NOT: [StopTimeWhereInput!]
  id: IDFilter
  busStop: BusStopWhereInput
  trip: TripWhereInput
  departureTime: StringFilter
}

input StopTimeOrderByInput {
  id: OrderDirection
  departureTime: OrderDirection
}

input StopTimeUpdateInput {
  busStop: BusStopRelateToOneForUpdateInput
  trip: TripRelateToOneForUpdateInput
  departureTime: String
}

input BusStopRelateToOneForUpdateInput {
  create: BusStopCreateInput
  connect: BusStopWhereUniqueInput
  disconnect: Boolean
}

input TripRelateToOneForUpdateInput {
  create: TripCreateInput
  connect: TripWhereUniqueInput
  disconnect: Boolean
}

input StopTimeUpdateArgs {
  where: StopTimeWhereUniqueInput!
  data: StopTimeUpdateInput!
}

input StopTimeCreateInput {
  busStop: BusStopRelateToOneForCreateInput
  trip: TripRelateToOneForCreateInput
  departureTime: String
}

input BusStopRelateToOneForCreateInput {
  create: BusStopCreateInput
  connect: BusStopWhereUniqueInput
}

input TripRelateToOneForCreateInput {
  create: TripCreateInput
  connect: TripWhereUniqueInput
}

type Bus {
  id: ID!
  registrationNumber: String
  model: String
  trips(where: TripWhereInput! = {}, orderBy: [TripOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TripWhereUniqueInput): [Trip!]
  tripsCount(where: TripWhereInput! = {}): Int
}

input BusWhereUniqueInput {
  id: ID
}

input BusWhereInput {
  AND: [BusWhereInput!]
  OR: [BusWhereInput!]
  NOT: [BusWhereInput!]
  id: IDFilter
  registrationNumber: StringFilter
  model: StringFilter
  trips: TripManyRelationFilter
}

input BusOrderByInput {
  id: OrderDirection
  registrationNumber: OrderDirection
  model: OrderDirection
}

input BusUpdateInput {
  registrationNumber: String
  model: String
  trips: TripRelateToManyForUpdateInput
}

input BusUpdateArgs {
  where: BusWhereUniqueInput!
  data: BusUpdateInput!
}

input BusCreateInput {
  registrationNumber: String
  model: String
  trips: TripRelateToManyForCreateInput
}

type Driver {
  id: ID!
  firstName: String
  lastName: String
  trips(where: TripWhereInput! = {}, orderBy: [TripOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TripWhereUniqueInput): [Trip!]
  tripsCount(where: TripWhereInput! = {}): Int
}

input DriverWhereUniqueInput {
  id: ID
}

input DriverWhereInput {
  AND: [DriverWhereInput!]
  OR: [DriverWhereInput!]
  NOT: [DriverWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  trips: TripManyRelationFilter
}

input DriverOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
}

input DriverUpdateInput {
  firstName: String
  lastName: String
  trips: TripRelateToManyForUpdateInput
}

input DriverUpdateArgs {
  where: DriverWhereUniqueInput!
  data: DriverUpdateInput!
}

input DriverCreateInput {
  firstName: String
  lastName: String
  trips: TripRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createBusStop(data: BusStopCreateInput!): BusStop
  createBusStops(data: [BusStopCreateInput!]!): [BusStop]
  updateBusStop(where: BusStopWhereUniqueInput!, data: BusStopUpdateInput!): BusStop
  updateBusStops(data: [BusStopUpdateArgs!]!): [BusStop]
  deleteBusStop(where: BusStopWhereUniqueInput!): BusStop
  deleteBusStops(where: [BusStopWhereUniqueInput!]!): [BusStop]
  createRoute(data: RouteCreateInput!): Route
  createRoutes(data: [RouteCreateInput!]!): [Route]
  updateRoute(where: RouteWhereUniqueInput!, data: RouteUpdateInput!): Route
  updateRoutes(data: [RouteUpdateArgs!]!): [Route]
  deleteRoute(where: RouteWhereUniqueInput!): Route
  deleteRoutes(where: [RouteWhereUniqueInput!]!): [Route]
  createTrip(data: TripCreateInput!): Trip
  createTrips(data: [TripCreateInput!]!): [Trip]
  updateTrip(where: TripWhereUniqueInput!, data: TripUpdateInput!): Trip
  updateTrips(data: [TripUpdateArgs!]!): [Trip]
  deleteTrip(where: TripWhereUniqueInput!): Trip
  deleteTrips(where: [TripWhereUniqueInput!]!): [Trip]
  createStopTime(data: StopTimeCreateInput!): StopTime
  createStopTimes(data: [StopTimeCreateInput!]!): [StopTime]
  updateStopTime(where: StopTimeWhereUniqueInput!, data: StopTimeUpdateInput!): StopTime
  updateStopTimes(data: [StopTimeUpdateArgs!]!): [StopTime]
  deleteStopTime(where: StopTimeWhereUniqueInput!): StopTime
  deleteStopTimes(where: [StopTimeWhereUniqueInput!]!): [StopTime]
  createBus(data: BusCreateInput!): Bus
  createBuses(data: [BusCreateInput!]!): [Bus]
  updateBus(where: BusWhereUniqueInput!, data: BusUpdateInput!): Bus
  updateBuses(data: [BusUpdateArgs!]!): [Bus]
  deleteBus(where: BusWhereUniqueInput!): Bus
  deleteBuses(where: [BusWhereUniqueInput!]!): [Bus]
  createDriver(data: DriverCreateInput!): Driver
  createDrivers(data: [DriverCreateInput!]!): [Driver]
  updateDriver(where: DriverWhereUniqueInput!, data: DriverUpdateInput!): Driver
  updateDrivers(data: [DriverUpdateArgs!]!): [Driver]
  deleteDriver(where: DriverWhereUniqueInput!): Driver
  deleteDrivers(where: [DriverWhereUniqueInput!]!): [Driver]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  busStop(where: BusStopWhereUniqueInput!): BusStop
  busStops(where: BusStopWhereInput! = {}, orderBy: [BusStopOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BusStopWhereUniqueInput): [BusStop!]
  busStopsCount(where: BusStopWhereInput! = {}): Int
  route(where: RouteWhereUniqueInput!): Route
  routes(where: RouteWhereInput! = {}, orderBy: [RouteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RouteWhereUniqueInput): [Route!]
  routesCount(where: RouteWhereInput! = {}): Int
  trip(where: TripWhereUniqueInput!): Trip
  trips(where: TripWhereInput! = {}, orderBy: [TripOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TripWhereUniqueInput): [Trip!]
  tripsCount(where: TripWhereInput! = {}): Int
  stopTime(where: StopTimeWhereUniqueInput!): StopTime
  stopTimes(where: StopTimeWhereInput! = {}, orderBy: [StopTimeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StopTimeWhereUniqueInput): [StopTime!]
  stopTimesCount(where: StopTimeWhereInput! = {}): Int
  bus(where: BusWhereUniqueInput!): Bus
  buses(where: BusWhereInput! = {}, orderBy: [BusOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BusWhereUniqueInput): [Bus!]
  busesCount(where: BusWhereInput! = {}): Int
  driver(where: DriverWhereUniqueInput!): Driver
  drivers(where: DriverWhereInput! = {}, orderBy: [DriverOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DriverWhereUniqueInput): [Driver!]
  driversCount(where: DriverWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
